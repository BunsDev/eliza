name: NPM Alpha Release

on:
  pull_request:
    types: [closed]
    branches:
      - develop
  workflow_dispatch:

jobs:
  alpha-release:
    if: github.event_name == 'workflow_dispatch' || (github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '23.3.0'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: '1.2.21'

      - name: Install Dependencies
        # Note: Not using --frozen-lockfile for alpha builds to allow flexibility
        # Alpha releases can handle lockfile updates since they're pre-release versions
        run: bun install

      - name: Configure Git & Registry
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc

      - name: Version Alpha Packages
        run: |
          # Classic lerna versioning with proper semantic versioning
          # This will auto-increment the prerelease version (alpha.0, alpha.1, etc.)
          echo "Creating alpha version with proper semantic versioning..."
          
          # Use lerna version to bump prerelease version
          # This will:
          # 1. Auto-increment the prerelease number (alpha.0 -> alpha.1)
          # 2. Create a git commit with the version changes
          # 3. Create a git tag for the release (v1.5.5-alpha.1)
          # 4. Update all packages to the same version with --force-publish
          bunx lerna version prerelease --preid alpha --force-publish --yes --message "chore(release): publish alpha %s [skip ci]"
          
          # Show the new version for logging
          NEW_VERSION=$(node -p "require('./packages/core/package.json').version")
          echo "New alpha version: v${NEW_VERSION}"
          
      - name: Push Version Changes and Tags
        run: |
          # Push the version commit and tags to the repository
          # This creates a permanent record of each alpha release
          git push origin HEAD:${GITHUB_REF#refs/heads/} --follow-tags
          
          # List the tags for verification
          echo "Created and pushed tag:"
          git describe --tags --abbrev=0

      - name: Build
        run: bun run build

      - name: Publish Alpha
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: bun run release:alpha
