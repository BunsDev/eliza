name: NPM Release

# Unified workflow for all NPM releases:
# - Alpha: On merge to develop branch
# - Beta: On merge to main branch  
# - Production: On GitHub release creation
#
# Version Management:
# - Uses lerna version and publish commands with consistent patterns
# - Publishes to NPM first, then commits version changes
# - Prevents infinite loops with [skip ci] in commit messages

on:
  push:
    branches:
      - develop # Triggers alpha releases
      - main    # Triggers beta releases
  release:
    types: [created] # Triggers production releases
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Manual release type'
        required: true
        type: choice
        options:
          - alpha
          - beta
          - latest

jobs:
  release:
    runs-on: ubuntu-latest
    # Skip if commit message contains [skip ci]
    if: ${{ !contains(github.event.head_commit.message || '', '[skip ci]') }}
    
    permissions:
      contents: write
      packages: write
      id-token: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '23.3.0'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: '1.2.21'

      - name: Install dependencies
        run: bun install

      # Determine release type and version
      - name: Determine release type
        id: release_type
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "type=latest" >> $GITHUB_OUTPUT
            echo "dist_tag=latest" >> $GITHUB_OUTPUT
            # Extract version from tag (remove 'v' prefix if present)
            VERSION="${{ github.event.release.tag_name }}"
            VERSION="${VERSION#v}"
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "is_release_event=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "type=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
            echo "dist_tag=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
            echo "is_release_event=false" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "type=alpha" >> $GITHUB_OUTPUT
            echo "dist_tag=alpha" >> $GITHUB_OUTPUT
            echo "is_release_event=false" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "type=beta" >> $GITHUB_OUTPUT
            echo "dist_tag=beta" >> $GITHUB_OUTPUT
            echo "is_release_event=false" >> $GITHUB_OUTPUT
          fi

      # Version Management
      - name: Version packages
        id: version
        run: |
          RELEASE_TYPE="${{ steps.release_type.outputs.type }}"
          
          if [[ "${{ github.event_name }}" == "release" ]]; then
            # For production releases from GitHub release
            VERSION="${{ steps.release_type.outputs.version }}"
            echo "Setting version to ${VERSION}"
            bunx lerna version ${VERSION} \
              --force-publish \
              --yes \
              --no-private \
              --no-git-tag-version \
              --no-push
          elif [[ "${RELEASE_TYPE}" == "alpha" ]]; then
            # Alpha prerelease
            bunx lerna version prerelease \
              --preid alpha \
              --force-publish \
              --yes \
              --no-private \
              --no-git-tag-version \
              --no-push
          elif [[ "${RELEASE_TYPE}" == "beta" ]]; then
            # Beta prerelease
            bunx lerna version prerelease \
              --preid beta \
              --force-publish \
              --yes \
              --no-private \
              --no-git-tag-version \
              --no-push
          elif [[ "${RELEASE_TYPE}" == "latest" ]]; then
            # Manual production release
            bunx lerna version patch \
              --force-publish \
              --yes \
              --no-private \
              --no-git-tag-version \
              --no-push
          fi
          
          # Get the new version
          VERSION=$(node -p "require('./lerna.json').version")
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      # Update lockfile after version changes
      - name: Update lockfile
        run: |
          bun install --no-frozen-lockfile

      # Build packages with correct version numbers
      - name: Build packages
        run: |
          echo "Building packages with version v${{ steps.version.outputs.version }}..."
          bun run build

      # Publish to NPM FIRST (before git operations)
      - name: Publish to NPM
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          DIST_TAG="${{ steps.release_type.outputs.dist_tag }}"
          
          # Configure npm for authentication
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > ~/.npmrc
          
          # Publish with appropriate dist-tag
          bunx lerna publish from-package \
            --dist-tag ${DIST_TAG} \
            --force-publish \
            --yes \
            --no-verify-access
          
          echo "âœ… Successfully published to NPM with dist-tag: ${DIST_TAG}"

      # Only commit and push AFTER successful NPM publish
      - name: Commit and push version changes
        id: commit
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          RELEASE_TYPE="${{ steps.release_type.outputs.type }}"
          
          # Stage all changes
          git add -A
          
          # Commit with [skip ci] to prevent infinite loop
          git commit -m "chore: release v${VERSION} (${RELEASE_TYPE}) [skip ci]" || echo "No changes to commit"
          
          # Only create tag if NOT from a GitHub release (tag already exists)
          if [[ "${{ steps.release_type.outputs.is_release_event }}" != "true" ]]; then
            git tag "v${VERSION}" || echo "Tag already exists"
          fi
          
          # Push changes and tags
          git push origin HEAD --follow-tags || echo "Push failed - may be protected branch"

      # Create GitHub Release for alpha/beta (not for production, as it already exists)
      - name: Create GitHub release
        if: github.event_name != 'release' && steps.release_type.outputs.type != 'latest'
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: v${{ steps.version.outputs.version }}
          body: |
            ${{ steps.release_type.outputs.type == 'alpha' && 'ðŸš€ Alpha Release' || 'ðŸ”µ Beta Release' }}
            
            Version: `v${{ steps.version.outputs.version }}`
            
            Install with:
            ```bash
            npm install @elizaos/core@${{ steps.release_type.outputs.dist_tag }}
            ```
          draft: false
          prerelease: true

      - name: Summary
        if: always()
        run: |
          echo "# ðŸ“¦ Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: v${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: ${{ steps.release_type.outputs.type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dist Tag**: ${{ steps.release_type.outputs.dist_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Installation" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "npm install @elizaos/core@${{ steps.release_type.outputs.dist_tag }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      # Handle failure - create issue if publish failed
      - name: Create failure issue
        if: failure() && steps.version.outputs.version
        uses: actions/create-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          title: "Release Failed: v${{ steps.version.outputs.version }}"
          body: |
            The release workflow failed for version v${{ steps.version.outputs.version }}.
            
            **Details:**
            - Release Type: ${{ steps.release_type.outputs.type }}
            - Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            - Triggered By: ${{ github.event_name }}
            
            **Action Required:**
            - Check the workflow logs for the failure reason
            - If NPM publish failed but git was not updated, the version is safe to retry
            - If git was updated but NPM failed, manual intervention may be needed
          labels: bug, release-failure