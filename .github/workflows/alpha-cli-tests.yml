name: Alpha CLI Tests

# Cancel previous runs for the same PR/branch
concurrency:
  group: alpha-cli-tests-${{ github.workflow }}-${{ github.event_name == 'workflow_run' && github.event.workflow_run.id || github.ref }}
  cancel-in-progress: true

env:
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  ELIZA_NONINTERACTIVE: true

on:
  workflow_run:
    workflows: ["NPM Alpha Release"]
    types:
      - completed
  workflow_dispatch:  # Allow manual trigger for testing

jobs:
  test:
    # Only run if the NPM Alpha Release workflow succeeded (or manual trigger)
    if: github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success'
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.21

      - name: Install @elizaos/cli from npm (alpha tag)
        shell: bash
        run: |
          echo "Installing @elizaos/cli@alpha globally..."
          bun install -g @elizaos/cli@alpha

      - name: Verify elizaos installation
        shell: bash
        run: |
          echo "Verifying elizaos command is available..."
          which elizaos || echo "elizaos not found in PATH"
          elizaos --version || echo "Failed to run elizaos --version"

      - name: Clean test artifacts
        shell: bash
        run: |
          rm -rf ~/.eliza/projects
          rm -rf test-new-agent
          rm -rf plugin-test-plugin

      - name: Create .env file for tests
        shell: bash
        run: |
          echo "OPENAI_API_KEY=$OPENAI_API_KEY" > .env
          echo "LOG_LEVEL=info" >> .env

      - name: Run Basic CLI Smoke Tests
        shell: bash
        run: |
          set -e
          echo "=== Running Basic CLI Smoke Tests ==="
          
          # Test 1: Version command
          echo "Test 1: Testing elizaos -v"
          elizaos -v
          echo "✓ Version command works"
          echo ""
          
          # Test 2: Create new agent
          echo "Test 2: Creating new agent"
          elizaos create test-new-agent -y
          echo "✓ Agent created successfully"
          echo ""
          
          # Test 3: Start agent (timeout after 30s to ensure it starts properly)
          echo "Test 3: Starting agent"
          cd test-new-agent
          
          # Create a cross-platform timeout wrapper
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Windows: Use PowerShell with timeout
            powershell -Command "
              \$process = Start-Process -FilePath 'elizaos' -ArgumentList 'start' -NoNewWindow -PassThru -RedirectStandardOutput 'start.log' -RedirectStandardError 'start-error.log'
              \$process | Wait-Process -Timeout 30 -ErrorAction SilentlyContinue
              if (!\$process.HasExited) { 
                \$process | Stop-Process -Force 
              }
            " || true
            cat start.log start-error.log 2>/dev/null > combined.log || cat start.log > combined.log || true
            START_LOG="combined.log"
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            # macOS: Use gtimeout if available, otherwise background process with sleep
            if command -v gtimeout &> /dev/null; then
              gtimeout 30s elizaos start 2>&1 | tee start.log || true
            else
              # Fallback: Run in background and kill after timeout
              elizaos start > start.log 2>&1 &
              PID=$!
              sleep 30
              kill $PID 2>/dev/null || true
            fi
            START_LOG="start.log"
          else
            # Linux: Use timeout command
            timeout 30s elizaos start 2>&1 | tee start.log || true
            START_LOG="start.log"
          fi
          
          # Check for success messages from AgentServer
          if grep -i "startup successful" "$START_LOG" || grep -i "listening on port" "$START_LOG" || grep -i "agentserver is listening" "$START_LOG" || grep -i "starting server" "$START_LOG"; then
            echo "✓ Agent started successfully"
          else
            echo "✗ Agent failed to start - checking log contents:"
            cat "$START_LOG"
            exit 1
          fi
          cd ..
          echo ""
          
          # Test 4: Create plugin
          echo "Test 4: Creating plugin"
          elizaos create -t plugin test-plugin
          echo "✓ Plugin created successfully"
          echo ""
          
          # Test 5: Run plugin dev (timeout after 30s to ensure it starts)
          echo "Test 5: Starting plugin dev mode"
          cd plugin-test-plugin
          
          # Create a cross-platform timeout wrapper
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Windows: Use PowerShell with timeout
            powershell -Command "
              \$process = Start-Process -FilePath 'elizaos' -ArgumentList 'dev' -NoNewWindow -PassThru -RedirectStandardOutput 'dev.log' -RedirectStandardError 'dev-error.log'
              \$process | Wait-Process -Timeout 30 -ErrorAction SilentlyContinue
              if (!\$process.HasExited) { 
                \$process | Stop-Process -Force 
              }
            " || true
            cat dev.log dev-error.log 2>/dev/null > combined-dev.log || cat dev.log > combined-dev.log || true
            DEV_LOG="combined-dev.log"
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            # macOS: Use gtimeout if available, otherwise background process with sleep
            if command -v gtimeout &> /dev/null; then
              gtimeout 30s elizaos dev 2>&1 | tee dev.log || true
            else
              # Fallback: Run in background and kill after timeout
              elizaos dev > dev.log 2>&1 &
              PID=$!
              sleep 30
              kill $PID 2>/dev/null || true
            fi
            DEV_LOG="dev.log"
          else
            # Linux: Use timeout command
            timeout 30s elizaos dev 2>&1 | tee dev.log || true
            DEV_LOG="dev.log"
          fi
          
          # Check for success messages from dev server
          if grep -i "starting server" "$DEV_LOG" || grep -i "watching" "$DEV_LOG" || grep -i "startup successful" "$DEV_LOG" || grep -i "ready" "$DEV_LOG" || grep -i "development" "$DEV_LOG"; then
            echo "✓ Plugin dev mode started successfully"
          else
            echo "✗ Plugin dev mode failed to start - checking log contents:"
            cat "$DEV_LOG"
            exit 1
          fi
          cd ..
          echo ""
          
          echo "=== All tests passed! ==="