name: "Simple Advanced Mock Test"
description: "Tests enhanced mocking features with simple examples"

environment:
  type: local

setup:
  mocks:
    # Test input parameter matching
    - service: "test-service"
      method: "processData"
      when:
        input:
          type: "user"
          action: "create"
        matcher: "input.type === 'user' && input.action === 'create'"
      response:
        success: true
        id: 12345
        message: "User created successfully"

    # Test dynamic response function
    - service: "test-service"
      method: "calculate"
      when:
        args: [10, 20]
      responseFn: |
        return {
          result: args[0] + args[1],
          operation: "addition",
          timestamp: new Date().toISOString()
        }

    # Test error simulation
    - service: "test-service"
      method: "divide"
      when:
        input:
          divisor: 0
        matcher: "input.divisor === 0"
      error:
        code: "DIVISION_BY_ZERO"
        message: "Cannot divide by zero"

    # Test metadata (delay)
    - service: "test-service"
      method: "slowOperation"
      when:
        input:
          operation: "slow"
        matcher: "input.operation === 'slow'"
      response:
        status: "completed"
        message: "Slow operation finished"
      metadata:
        delay: 1000 # 1 second delay

    # Test random failure
    - service: "test-service"
      method: "unreliableOperation"
      when:
        input:
          reliability: "low"
        matcher: "input.reliability === 'low'"
      error:
        code: "RANDOM_FAILURE"
        message: "Random network failure"
      metadata:
        probability: 0.5 # 50% chance of failure

run:
  - name: "Test input parameter matching"
    lang: javascript
    code: |
      console.log('Testing input parameter matching...');
      console.log('Mock should match on input.type="user" and input.action="create"');
      console.log('Input parameter matching test completed');
    evaluations:
      - type: "string_contains"
        value: "Input parameter matching test completed"

  - name: "Test dynamic response function"
    lang: javascript
    code: |
      console.log('Testing dynamic response function...');
      console.log('Mock should calculate 10 + 20 = 30');
      console.log('Dynamic response function test completed');
    evaluations:
      - type: "string_contains"
        value: "Dynamic response function test completed"

  - name: "Test error simulation"
    lang: javascript
    code: |
      console.log('Testing error simulation...');
      console.log('Mock should simulate DIVISION_BY_ZERO error');
      console.log('Error simulation test completed');
    evaluations:
      - type: "string_contains"
        value: "Error simulation test completed"

  - name: "Test network delay"
    lang: javascript
    code: |
      console.log('Testing network delay...');
      console.log('Mock should have 1 second delay');
      console.log('Network delay test completed');
    evaluations:
      - type: "string_contains"
        value: "Network delay test completed"

  - name: "Test random failure"
    lang: javascript
    code: |
      console.log('Testing random failure...');
      console.log('Mock should have 50% failure probability');
      console.log('Random failure test completed');
    evaluations:
      - type: "string_contains"
        value: "Random failure test completed"

judgment:
  strategy: all_pass 