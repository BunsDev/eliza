name: "Test Mocking Engine"
description: "Verifies the MockEngine can intercept service calls and return predefined responses"
environment:
  type: local
setup:
  mocks:
    # A conditional mock - only applies when specific args are passed
    - service: "github-service"
      method: "searchIssues"
      when:
        args: ["elizaos/eliza"]
      response:
        - { title: "Mocked Issue for Eliza", number: 123 }
    # A generic mock - applies to all calls when no conditional match
    - service: "github-service"
      method: "searchIssues"
      response:
        - { title: "Generic Mocked Issue", number: 456 }
    # Mock for a different service
    - service: "database-service"
      method: "query"
      response:
        - { id: 1, name: "Mocked Database Result" }
run:
  # Expected: Should trigger conditional mock for "elizaos/eliza"
  - lang: javascript
    code: |
      console.log('Testing conditional mock...');
      // This would normally call githubService.searchIssues("elizaos/eliza")
      console.log('Mock should return: Mocked Issue for Eliza');
    evaluations: []
  # Expected: Should trigger generic mock for different repo
  - lang: javascript
    code: |
      console.log('Testing generic mock...');
      // This would normally call githubService.searchIssues("other/repo")
      console.log('Mock should return: Generic Mocked Issue');
    evaluations: []
  # Expected: Should trigger database mock
  - lang: javascript
    code: |
      console.log('Testing database mock...');
      // This would normally call databaseService.query("SELECT * FROM users")
      console.log('Mock should return: Mocked Database Result');
    evaluations: []
judgment:
  strategy: all_pass 